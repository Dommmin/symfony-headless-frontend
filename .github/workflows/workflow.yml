name: Zero Downtime Deployment

on:
  push:
    branches:
      - main

jobs:
  build:
    name: 🏗️ Build Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, dom, fileinfo, sqlite3, zip, gd, intl, redis, imagick
          tools: composer:v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Create .env file for build
        run: |
          printf '%s\n' '${{ vars.ENV_FILE }}' > .env
          # Clean up potential issues
          sed -i 's/\r$//' .env
          sed -i '/^$/d' .env

      - name: Verify .env file
        run: |
          echo "=== .env file content ==="
          cat .env
          echo "========================="
          echo "File size: $(wc -c < .env) bytes"

      - name: Install Composer dependencies (skip scripts)
        run: |
          composer install --no-interaction --no-progress --no-dev --optimize-autoloader --no-scripts
        env:
          APP_ENV: prod

      - name: Create release archive
        run: |
          mkdir release
          shopt -s extglob
          cp -r !(release|.git|tests|node_modules|.github|*.md|phpunit.xml*|webpack.config.js) release/
          rm -rf release/var/cache/dev release/var/log/* release/.env.test* release/phpunit.xml*
          tar -czf release.tar.gz -C release .
          rm -rf release

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: release
          path: release.tar.gz

  deploy:
    name: 🚀 Deploy to Server
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH Key
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Setup known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Download release artifact
        uses: actions/download-artifact@v4
        with:
          name: release
          path: .

      - name: Create production .env file
        run: |
          printf '%s\n' '${{ vars.ENV_FILE }}' > .env
          # Clean up potential issues
          sed -i 's/\r$//' .env
          sed -i '/^$/d' .env

      - name: Verify .env file before upload
        run: |
          echo "=== Production .env file content ==="
          cat .env
          echo "=================================="
          echo "File size: $(wc -c < .env) bytes"
          if [ ! -s .env ]; then
            echo "ERROR: .env file is empty!"
            exit 1
          fi

      - name: Upload release to server
        run: |
          scp -P ${{ secrets.SSH_PORT }} release.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/symfony/

      - name: Upload .env file to shared directory
        run: |
          scp -P ${{ secrets.SSH_PORT }} .env ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/symfony/shared/.env

      - name: Verify .env file on server
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            echo "=== .env file on server ==="
            cat /home/${{ secrets.SSH_USER }}/symfony/shared/.env
            echo "=========================="
            echo "File size: $(wc -c < /home/${{ secrets.SSH_USER }}/symfony/shared/.env) bytes"
            if [ ! -s /home/${{ secrets.SSH_USER }}/symfony/shared/.env ]; then
              echo "ERROR: .env file on server is empty!"
              exit 1
            fi
          '

      - name: Run deploy script on server
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'bash -s' < ./deploy.sh
